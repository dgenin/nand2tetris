// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //Determine instruction type
    Not(in=instruction[15], out=Ainst);
    Or(a=Ainst, b=writeA, out=loadA);

    //Registers
    ARegister(in=Ain, load=loadA, out=Aout, out[0..14]=addressM);
    DRegister(in=ALUout, load=writeD, out=Dout);

    // A/M selector
    Mux16(a=Aout, b=inM, sel=AMsel, out=AMout);

    // A reg source selector
    Mux16(a[0..14]=instruction[0..14], a[15]=false, b=ALUout, sel=instruction[15], out=Ain);

    // Instruction decoder
    Mux16(a=false, b=instruction, sel=instruction[15], out[12]=AMsel, out[11]=zx, out[10]=nx, out[9]=zy, out[8]=ny, out[7]=f, out[6]=no, out[3]=writeM, out[4]=writeD, out[5]=writeA, out[2]=j0, out[1]=j1, out[0]=j2);

    // ALU
    ALU(x=Dout, y=AMout, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=ALUout, out=outM, zr=zr, ng=ng);

    // Jump logic
    Not(in=ng, out=ge);
    Not(in=zr, out=nz);
    And(a=ge, b=nz, out=ps);
    And(a=zr, b=j1, out=jumpeq);
    And(a=ng, b=j0, out=jumplt);
    And(a=ps, b=j2, out=jumpgt);
    Or(a=jumpeq, b=jumplt, out=jumple);
    Or(a=jumple, b=jumpgt, out=PCload);
    Not(in=PCload, out=PCinc);
    
    // PC
    PC(in=Aout, load=PCload, inc=PCinc, reset=reset, out[0..14]=pc);
}