type unr_op = [
  | UMINUS
  | NOT
]

type bin_op = [PLUS | MINUS | MULT | DIV |
              EQUAL | LESS | GREAT | AND | OR]

type brace = [LBRACE | RBRACE]
type brack = [LBRACK | RBRACK]
type paren = [LPAREN | RPAREN]
type const = [TRUE | FALSE | NULL | THIS]

type identifier = string

type var_type = [INT | CHAR | BOOLEAN | VOID | CLASS of identifier]
type var_scope = [STATIC | FIELD]
type sub_type = [CONSTRUCTOR | FUNCTION | METHOD]

type expression = [
  | Eint_const of int
  | Estr_const of string
  | Ekwd_const of const
  | Eunr_exp of (unr_op * expression)
  | Ebin_exp of (expression * bin_op * expression)
  | Evar of identifier
  | Earray_elem of (identifier * expression)
  | Eparen_exp of expression
    (* subname, expressionList *)
  | Esubcall of (identifier * expression list)
    (* class/var, subname, expressionList *)
  | Emethcall of (identifier * identifier * expression list)]
(*  | Efunc_call of identifier * expression list;;*)

type ret_val = [VAL of expression | None]

type statement = [
  | Slist of statement list
  | Slet of (identifier * expression)
  | Sif of (expression * statement list * statement list)
  | Swhile of (expression * statement list)
  | Sdo of (identifier * expression list)
  | Sreturn of ret_val]

type declaration = [
  | Dclass of (identifier * declaration list * declaration list)
  | Dclass_var of (var_scope * var_type * identifier)
  (* subroutine type, return type, subroutine name, parameter list, local variables, body *)
  | Dsub of (sub_type * var_type * identifier * declaration list * declaration list * statement list)
  | Dsub_var of (var_type * identifier)
  | Dsub_param of (var_type * identifier)
  | Dempty]